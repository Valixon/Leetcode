import java.util.Stack;

public class L_2116 {
    public static void main(String[] args) {
        System.out.println(canBeValid("))))(())((()))))((()((((((())())((()))((((())()()))(()", "101100101111110000000101000101001010110001110000000101"));
        System.out.println(canBeValid("((()(()()))()((()()))))()((()(()", "10111100100101001110100010001001"));
        System.out.println(canBeValid("(((((())()()()))()))()))(())(())()(()(()(((())))()))))((((()(()()()(()()()(((()(()()(()(())(()())((((()()((())((())()(((()())))())()((())()))(()((())(())(())()))(()))(())()))(())())()()()((()()(((()(())(())()(())()()()())))((((()))))((())(()()))()())()()()())))((((()()()())())))())((())())()((()(())()(())))(((()())((()((()()()))()(()()(()))(()(())(()()((()))((())()((()()(()))()(((()))(((()())))((())(())((()(())())(()(()(((()((((())())(((())(()((((())()))))()(()))(())(())(())())()))))))())(())()()()))(()(()((((((())(())))()()()(((())()()))()())(()()(((())))))()))()()", "00101111010011110110011000100000110011111010001011100000011100011101011001111001000100011101100110101111100000000111110101011100111000001111000110101110111001111001010001001010111010110100111000011001010000101111110011001011111001111111101101110000000110000101010101110000011011000100011011101110111001010110001100001101100001100000010101100101101001000110111101100011111110100111000110111100101101011001110110111100110110001100011011101111100010001101100001000110001011011101000100011001000101110111100001000111101001111111100000101111001110101100101111111100010000101010"));
    }

    public static boolean canBeValid(String s, String locked) {
        if (s.length() % 2 == 1) return false;
        byte[] a = s.getBytes();
        byte[] b = locked.getBytes();
        Stack<Character> bor = new Stack<>();
        for (int i = 0; i < b.length; i++) {
            if (b[i] == '0') {
                bor.add(' ');
            } else {
                if (a[i] == ')') {
                    if (bor.contains('(')) {
                        bor.removeElement('(');
                    } else if (bor.contains(' ')) {
                        bor.removeElement(' ');
                    } else {
                        return false;
                    }
                } else {
                    bor.add('(');
                }
            }
        }
        for (int i = bor.size() - 1; i >= 0; i--) {
            if (bor.get(i) == '(') {
                if (bor.lastIndexOf(' ') < i) return false;
                bor.remove(bor.lastIndexOf(' '));
            }
        }
        return true;
    }
}
